public class org.owasp.webgoat.webwolf.jwt.JWTToken extends java.lang.Object
{
    private java.lang.String encoded;
    private java.lang.String secretKey;
    private java.lang.String header;
    private boolean validHeader;
    private boolean validPayload;
    private boolean validToken;
    private java.lang.String payload;
    private boolean signatureValid;

    public static org.owasp.webgoat.webwolf.jwt.JWTToken decode(java.lang.String, java.lang.String)
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder $r5, $r7;
        java.lang.String r0, $r1, $r2, $r3, r6;
        org.owasp.webgoat.webwolf.jwt.JWTToken $r4, $r8;
        boolean $z0;

        r0 := @parameter0;

        r6 := @parameter1;

        $r1 = virtualinvoke r0.trim();

        $r2 = staticinvoke java.lang.System.getProperty("line.separator");

        $r3 = virtualinvoke $r1.replace($r2, "");

        $r4 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.parseToken($r3);

        $r5 = virtualinvoke $r4.toBuilder();

        $z0 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.validateSignature(r6, r0);

        $r7 = virtualinvoke $r5.signatureValid($z0);

        $r8 = virtualinvoke $r7.build();

        return $r8;
    }

    private static java.util.Map parse(java.lang.String)
    {
        java.util.Map $r3, $r5;
        com.fasterxml.jackson.databind.ObjectMapper $r0;
        java.lang.Object $r2;
        com.fasterxml.jackson.core.JsonProcessingException $r4;
        java.lang.String r1;

        r1 := @parameter0;

        $r0 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r0.<init>();

     label1:
        $r2 = virtualinvoke $r0.readValue(r1, class "Ljava/util/TreeMap;");

        $r3 = (java.util.Map) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke java.util.Map.of();

        return $r5;

        catch com.fasterxml.jackson.core.JsonProcessingException from label1 to label2 with label3;
    }

    private static java.lang.String write(java.lang.String, java.util.Map)
    {
        com.fasterxml.jackson.databind.ObjectWriter $r1;
        java.util.Map r2;
        com.fasterxml.jackson.databind.ObjectMapper $r0;
        com.fasterxml.jackson.core.JsonProcessingException $r5;
        java.lang.String $r3, r4;
        boolean $z0;

        r4 := @parameter0;

        r2 := @parameter1;

        $r0 = new com.fasterxml.jackson.databind.ObjectMapper;

        specialinvoke $r0.<init>();

        $r1 = virtualinvoke $r0.writerWithDefaultPrettyPrinter();

     label1:
        $z0 = interfaceinvoke r2.isEmpty();

        if $z0 == 0 goto label3;

     label2:
        return r4;

     label3:
        $r3 = virtualinvoke $r1.writeValueAsString(r2);

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

        return r4;

        catch com.fasterxml.jackson.core.JsonProcessingException from label1 to label2 with label5;
        catch com.fasterxml.jackson.core.JsonProcessingException from label3 to label4 with label5;
    }

    public static org.owasp.webgoat.webwolf.jwt.JWTToken encode(java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r17;
        org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder $r4, $r6, $r8, $r9, $r10, $r11;
        java.util.Map $r1, $r3;
        org.owasp.webgoat.webwolf.jwt.JWTToken $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z8_1, $z8_2, $z9_1, $z9_2;
        org.jose4j.jws.JsonWebSignature $r12;
        org.jose4j.keys.HmacKey $r15;
        org.jose4j.lang.JoseException $r24;
        java.lang.String[] $r19;
        java.nio.charset.Charset $r16;
        java.util.function.BiConsumer $r13;
        java.lang.String r0, r2, $r5, $r7, r14, $r18, $r21, $r22, $r23;
        org.jose4j.jwx.Headers $r20;

        r0 := @parameter0;

        r2 := @parameter1;

        r14 := @parameter2;

        $r1 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.parse(r0);

        $r3 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.parse(r2);

        $r4 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.builder();

        $r5 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.write(r0, $r1);

        $r6 = virtualinvoke $r4.header($r5);

        $r7 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.write(r2, $r3);

        $r8 = virtualinvoke $r6.payload($r7);

        $z0 = staticinvoke org.springframework.util.StringUtils.hasText(r0);

        if $z0 == 0 goto label01;

        $z7 = interfaceinvoke $r1.isEmpty();

        if $z7 != 0 goto label02;

     label01:
        $z8_1 = 1;

(0)     goto label03;

     label02:
(1)     $z8 = 0;

     label03:
        $z8_2 = Phi($z8_1 #0, $z8 #1);

        $r9 = virtualinvoke $r8.validHeader($z8_2);

        $r10 = virtualinvoke $r9.validToken(1);

        $z1 = staticinvoke org.springframework.util.StringUtils.hasText(r2);

        if $z1 == 0 goto label04;

        $z6 = interfaceinvoke $r3.isEmpty();

        if $z6 != 0 goto label05;

     label04:
        $z9_1 = 1;

(2)     goto label06;

     label05:
(3)     $z9 = 0;

     label06:
        $z9_2 = Phi($z9_1 #2, $z9 #3);

        $r11 = virtualinvoke $r10.validPayload($z9_2);

        $r12 = new org.jose4j.jws.JsonWebSignature;

        specialinvoke $r12.<init>();

        virtualinvoke $r12.setPayload(r2);

        $r13 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken$lambda_encode_0__1.bootstrap$($r12);

        interfaceinvoke $r1.forEach($r13);

        $z2 = interfaceinvoke $r1.isEmpty();

        if $z2 != 0 goto label07;

        $r19 = newarray (java.lang.String)[2];

        $r20 = virtualinvoke $r12.getHeaders();

        $r21 = virtualinvoke $r20.getEncodedHeader();

        $r19[0] = $r21;

        $r22 = virtualinvoke $r12.getEncodedPayload();

        $r19[1] = $r22;

        $r23 = staticinvoke org.jose4j.jwx.CompactSerializer.serialize($r19);

        virtualinvoke $r11.encoded($r23);

     label07:
        $z3 = interfaceinvoke $r1.isEmpty();

        if $z3 != 0 goto label11;

        $z4 = interfaceinvoke $r3.isEmpty();

        if $z4 != 0 goto label11;

        $z5 = staticinvoke org.springframework.util.StringUtils.hasText(r14);

        if $z5 == 0 goto label11;

        virtualinvoke $r12.setDoKeyValidation(0);

        $r15 = new org.jose4j.keys.HmacKey;

        $r16 = java.nio.charset.StandardCharsets.UTF_8;

        $r17 = virtualinvoke r14.getBytes($r16);

        specialinvoke $r15.<init>($r17);

        virtualinvoke $r12.setKey($r15);

     label08:
        $r18 = virtualinvoke $r12.getCompactSerialization();

        virtualinvoke $r11.encoded($r18);

        virtualinvoke $r11.signatureValid(1);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

     label11:
        $r25 = virtualinvoke $r11.build();

        return $r25;

        catch org.jose4j.lang.JoseException from label08 to label09 with label10;
    }

    private static org.owasp.webgoat.webwolf.jwt.JWTToken parseToken(java.lang.String)
    {
        byte[] $r7, $r11;
        org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder $r2, $r3;
        java.util.Map $r13, $r14;
        org.owasp.webgoat.webwolf.jwt.JWTToken $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z4_1, $z4_2, $z5_1, $z5_2, $z6_1, $z6_2, $z6_3, $z5_3, $z4_3;
        java.lang.String[] $r1;
        java.nio.charset.Charset $r8, $r12;
        int $i0;
        java.lang.String r0, $r5, $r6, $r9, $r10, $r15, $r16;

        r0 := @parameter0;

        $r1 = virtualinvoke r0.split("\\.");

        $r2 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.builder();

        $r3 = virtualinvoke $r2.encoded(r0);

        $i0 = lengthof $r1;

        if $i0 < 2 goto label7;

        $r5 = new java.lang.String;

        $r6 = $r1[0];

        $r7 = staticinvoke org.springframework.util.Base64Utils.decodeFromUrlSafeString($r6);

        $r8 = java.nio.charset.StandardCharsets.UTF_8;

        specialinvoke $r5.<init>($r7, $r8);

        $r9 = new java.lang.String;

        $r10 = $r1[1];

        $r11 = staticinvoke org.springframework.util.Base64Utils.decodeFromUrlSafeString($r10);

        $r12 = java.nio.charset.StandardCharsets.UTF_8;

        specialinvoke $r9.<init>($r11, $r12);

        $r13 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.parse($r5);

        $r14 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.parse($r9);

        $r15 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.write($r5, $r13);

        virtualinvoke $r3.header($r15);

        $r16 = staticinvoke org.owasp.webgoat.webwolf.jwt.JWTToken.write($r9, $r14);

        virtualinvoke $r3.payload($r16);

        $z0 = interfaceinvoke $r13.isEmpty();

        if $z0 != 0 goto label1;

        $z4 = 1;

(0)     goto label2;

     label1:
(1)     $z4_1 = 0;

     label2:
        $z4_2 = Phi($z4 #0, $z4_1 #1);

        virtualinvoke $r3.validHeader($z4_2);

        $z1 = interfaceinvoke $r14.isEmpty();

        if $z1 != 0 goto label3;

        $z5 = 1;

(2)     goto label4;

     label3:
(3)     $z5_1 = 0;

     label4:
        $z5_2 = Phi($z5 #2, $z5_1 #3);

        virtualinvoke $r3.validPayload($z5_2);

        $z2 = interfaceinvoke $r13.isEmpty();

        if $z2 != 0 goto label5;

        $z3 = interfaceinvoke $r14.isEmpty();

        if $z3 != 0 goto label5;

        $z6 = 1;

(4)     goto label6;

     label5:
(5)     $z6_1 = 0;

     label6:
        $z6_2 = Phi($z6 #4, $z6_1 #5);

        virtualinvoke $r3.validToken($z6_2);

(6)     goto label8;

     label7:
(7)     virtualinvoke $r3.validToken(0);

     label8:
        $z6_3 = Phi($z6_2 #6, $z6 #7);

        $z5_3 = Phi($z5_2 #6, $z5 #7);

        $z4_3 = Phi($z4_2 #6, $z4 #7);

        $r4 = virtualinvoke $r3.build();

        return $r4;
    }

    private static boolean validateSignature(java.lang.String, java.lang.String)
    {
        byte[] $r5;
        org.jose4j.jwt.consumer.InvalidJwtException $r10;
        org.jose4j.keys.HmacKey $r3;
        org.jose4j.jwt.consumer.JwtConsumerBuilder $r1, $r2, $r6, $r7;
        org.jose4j.jwt.consumer.JwtConsumer $r8;
        java.nio.charset.Charset $r4;
        java.lang.String r0, r9;
        boolean $z0;

        r0 := @parameter0;

        r9 := @parameter1;

        $z0 = staticinvoke org.springframework.util.StringUtils.hasText(r0);

        if $z0 == 0 goto label4;

        $r1 = new org.jose4j.jwt.consumer.JwtConsumerBuilder;

        specialinvoke $r1.<init>();

        $r2 = virtualinvoke $r1.setSkipAllValidators();

        $r3 = new org.jose4j.keys.HmacKey;

        $r4 = java.nio.charset.StandardCharsets.UTF_8;

        $r5 = virtualinvoke r0.getBytes($r4);

        specialinvoke $r3.<init>($r5);

        $r6 = virtualinvoke $r2.setVerificationKey($r3);

        $r7 = virtualinvoke $r6.setRelaxVerificationKeyValidation();

        $r8 = virtualinvoke $r7.build();

     label1:
        virtualinvoke $r8.processToClaims(r9);

     label2:
        return 1;

     label3:
        $r10 := @caughtexception;

        return 0;

     label4:
        return 0;

        catch org.jose4j.jwt.consumer.InvalidJwtException from label1 to label2 with label3;
    }

    public static org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder builder()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder $r0;

        $r0 = new org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder;

        specialinvoke $r0.<init>();

        return $r0;
    }

    public org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder toBuilder()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder $r0, $r3, $r5, $r7, $r8, $r9, $r10, $r12, $r13;
        java.lang.String $r2, $r4, $r6, $r11;
        org.owasp.webgoat.webwolf.jwt.JWTToken r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this;

        $r0 = new org.owasp.webgoat.webwolf.jwt.JWTToken$JWTTokenBuilder;

        specialinvoke $r0.<init>();

        $r2 = r1.encoded;

        $r3 = virtualinvoke $r0.encoded($r2);

        $r4 = r1.secretKey;

        $r5 = virtualinvoke $r3.secretKey($r4);

        $r6 = r1.header;

        $r7 = virtualinvoke $r5.header($r6);

        $z0 = r1.validHeader;

        $r8 = virtualinvoke $r7.validHeader($z0);

        $z1 = r1.validPayload;

        $r9 = virtualinvoke $r8.validPayload($z1);

        $z2 = r1.validToken;

        $r10 = virtualinvoke $r9.validToken($z2);

        $r11 = r1.payload;

        $r12 = virtualinvoke $r10.payload($r11);

        $z3 = r1.signatureValid;

        $r13 = virtualinvoke $r12.signatureValid($z3);

        return $r13;
    }

    public void <init>()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        specialinvoke r0.<init>();

        r0.encoded = "";

        r0.signatureValid = 1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String, boolean)
    {
        java.lang.String r1, r2, r3, r4;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean z0, z1, z2, z3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        z0 := @parameter3;

        z1 := @parameter4;

        z2 := @parameter5;

        r4 := @parameter6;

        z3 := @parameter7;

        specialinvoke r0.<init>();

        r0.encoded = "";

        r0.signatureValid = 1;

        r0.encoded = r1;

        r0.secretKey = r2;

        r0.header = r3;

        r0.validHeader = z0;

        r0.validPayload = z1;

        r0.validToken = z2;

        r0.payload = r4;

        r0.signatureValid = z3;

        return;
    }

    public java.lang.String getEncoded()
    {
        java.lang.String $r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        $r1 = r0.encoded;

        return $r1;
    }

    public java.lang.String getSecretKey()
    {
        java.lang.String $r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        $r1 = r0.secretKey;

        return $r1;
    }

    public java.lang.String getHeader()
    {
        java.lang.String $r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        $r1 = r0.header;

        return $r1;
    }

    public boolean isValidHeader()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.validHeader;

        return $z0;
    }

    public boolean isValidPayload()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.validPayload;

        return $z0;
    }

    public boolean isValidToken()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.validToken;

        return $z0;
    }

    public java.lang.String getPayload()
    {
        java.lang.String $r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        $r1 = r0.payload;

        return $r1;
    }

    public boolean isSignatureValid()
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.signatureValid;

        return $z0;
    }

    public void setEncoded(java.lang.String)
    {
        java.lang.String r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        r1 := @parameter0;

        r0.encoded = r1;

        return;
    }

    public void setSecretKey(java.lang.String)
    {
        java.lang.String r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        r1 := @parameter0;

        r0.secretKey = r1;

        return;
    }

    public void setHeader(java.lang.String)
    {
        java.lang.String r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        r1 := @parameter0;

        r0.header = r1;

        return;
    }

    public void setValidHeader(boolean)
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        r0.validHeader = z0;

        return;
    }

    public void setValidPayload(boolean)
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        r0.validPayload = z0;

        return;
    }

    public void setValidToken(boolean)
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        r0.validToken = z0;

        return;
    }

    public void setPayload(java.lang.String)
    {
        java.lang.String r1;
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;

        r0 := @this;

        r1 := @parameter0;

        r0.payload = r1;

        return;
    }

    public void setSignatureValid(boolean)
    {
        org.owasp.webgoat.webwolf.jwt.JWTToken r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        r0.signatureValid = z0;

        return;
    }

    public static void lambda$encode$0(org.jose4j.jws.JsonWebSignature, java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.jose4j.jws.JsonWebSignature r0;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        virtualinvoke r0.setHeader(r1, r2);

        return;
    }
}
