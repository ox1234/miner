public class org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10 extends org.owasp.webgoat.container.assignments.AssignmentEndpoint
{
    private final org.owasp.webgoat.container.LessonDataSource dataSource;

    public void <init>(org.owasp.webgoat.container.LessonDataSource)
    {
        org.owasp.webgoat.container.LessonDataSource r1;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10 r0;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.dataSource = r1;

        return;
    }

    public org.owasp.webgoat.container.assignments.AttackResult completed(java.lang.String)
    {
        org.owasp.webgoat.container.assignments.AttackResult $r2;
        java.lang.String r1;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10 r0;

        r0 := @this;

        r1 := @parameter0;

        $r2 = virtualinvoke r0.injectableQueryAvailability(r1);

        return $r2;
    }

    protected org.owasp.webgoat.container.assignments.AttackResult injectableQueryAvailability(java.lang.String)
    {
        java.sql.Connection $r5;
        java.sql.ResultSet $r7;
        boolean $z0, $z1;
        java.lang.Exception $r23;
        org.owasp.webgoat.container.assignments.AttackResult $r11, $r16, $r22, $r28, $r34, $r40;
        java.lang.StringBuilder $r41;
        java.lang.Throwable $r29, $r30, $r31;
        org.owasp.webgoat.container.LessonDataSource $r4;
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r9, $r10, $r12, $r13, $r15, $r18, $r19, $r21, $r24, $r27, $r32, $r33, $r35, $r39;
        java.sql.SQLException $r42;
        java.lang.String r1, $r2, $r14, $r17, $r20, $r25, $r26, $r36, $r37, $r38;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10 r3;
        java.sql.Statement $r6, $r8;

        r3 := @this;

        r1 := @parameter0;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<init>();

        $r2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(r1) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("SELECT * FROM access_log WHERE action LIKE \'%\u0001%\'");

     label01:
        $r4 = r3.dataSource;

        $r5 = virtualinvoke $r4.getConnection();

     label02:
        $r6 = interfaceinvoke $r5.createStatement(1004, 1007);

        $r7 = interfaceinvoke $r6.executeQuery($r2);

        $r8 = interfaceinvoke $r7.getStatement();

        if $r8 == null goto label05;

        interfaceinvoke $r7.first();

        $r17 = staticinvoke org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson8.generateTable($r7);

        virtualinvoke $r41.append($r17);

        $r18 = virtualinvoke r3.failed(r3);

        $r19 = virtualinvoke $r18.feedback("sql-injection.10.entries");

        $r20 = virtualinvoke $r41.toString();

        $r21 = virtualinvoke $r19.output($r20);

        $r22 = virtualinvoke $r21.build();

     label03:
        if $r5 == null goto label04;

        interfaceinvoke $r5.close();

     label04:
        return $r22;

     label05:
        $z0 = virtualinvoke r3.tableExists($r5);

        if $z0 == 0 goto label08;

        $r12 = virtualinvoke r3.failed(r3);

        $r13 = virtualinvoke $r12.feedback("sql-injection.10.entries");

        $r14 = virtualinvoke $r41.toString();

        $r15 = virtualinvoke $r13.output($r14);

        $r16 = virtualinvoke $r15.build();

     label06:
        if $r5 == null goto label07;

        interfaceinvoke $r5.close();

     label07:
        return $r16;

     label08:
        $r9 = virtualinvoke r3.success(r3);

        $r10 = virtualinvoke $r9.feedback("sql-injection.10.success");

        $r11 = virtualinvoke $r10.build();

     label09:
        if $r5 == null goto label10;

        interfaceinvoke $r5.close();

     label10:
        return $r11;

     label11:
        $r31 := @caughtexception;

        $z1 = virtualinvoke r3.tableExists($r5);

        if $z1 == 0 goto label14;

        $r35 = virtualinvoke r3.failed(r3);

        $r42 = (java.sql.SQLException) $r31;

        $r36 = virtualinvoke $r42.getMessage();

        $r37 = virtualinvoke $r41.toString();

        $r38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($r36, $r37) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("<span class=\'feedback-negative\'>\u0001</span><br>\u0001");

        $r39 = virtualinvoke $r35.output($r38);

        $r40 = virtualinvoke $r39.build();

     label12:
        if $r5 == null goto label13;

        interfaceinvoke $r5.close();

     label13:
        return $r40;

     label14:
        $r32 = virtualinvoke r3.success(r3);

        $r33 = virtualinvoke $r32.feedback("sql-injection.10.success");

        $r34 = virtualinvoke $r33.build();

     label15:
        if $r5 == null goto label16;

        interfaceinvoke $r5.close();

     label16:
        return $r34;

     label17:
        $r30 := @caughtexception;

        if $r5 == null goto label21;

     label18:
        interfaceinvoke $r5.close();

     label19:
        goto label21;

     label20:
        $r29 := @caughtexception;

        virtualinvoke $r30.addSuppressed($r29);

     label21:
        throw $r30;

     label22:
        $r23 := @caughtexception;

        $r24 = virtualinvoke r3.failed(r3);

        $r25 = virtualinvoke $r23.getMessage();

        $r26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($r25) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("<span class=\'feedback-negative\'>\u0001</span>");

        $r27 = virtualinvoke $r24.output($r26);

        $r28 = virtualinvoke $r27.build();

        return $r28;

        catch java.sql.SQLException from label02 to label03 with label11;
        catch java.sql.SQLException from label05 to label06 with label11;
        catch java.sql.SQLException from label08 to label09 with label11;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Exception from label01 to label04 with label22;
        catch java.lang.Exception from label05 to label07 with label22;
        catch java.lang.Exception from label08 to label10 with label22;
        catch java.lang.Exception from label11 to label13 with label22;
        catch java.lang.Exception from label14 to label16 with label22;
        catch java.lang.Exception from label17 to label22 with label22;
    }

    private boolean tableExists(java.sql.Connection)
    {
        java.lang.Throwable $r4;
        java.sql.Connection r0;
        java.sql.SQLException $r9, $r10;
        java.sql.ResultSet $r2;
        int $i0;
        java.lang.String $r5, $r7;
        boolean $z0, $z1, $z1_1, $z1_2;
        java.io.PrintStream $r6;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10 r8;
        java.sql.Statement $r1;
        java.sql.ResultSetMetaData $r3;

        r8 := @this;

        r0 := @parameter0;

     label1:
        $r1 = interfaceinvoke r0.createStatement(1004, 1007);

        $r2 = interfaceinvoke $r1.executeQuery("SELECT * FROM access_log");

        $r3 = interfaceinvoke $r2.getMetaData();

        $i0 = interfaceinvoke $r3.getColumnCount();

        if $i0 <= 0 goto label2;

        $z1 = 1;

(0)     goto label3;

     label2:
(1)     $z1_1 = 0;

     label3:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;

     label4:
        $r4 := @caughtexception;

        $r9 = (java.sql.SQLException) $r4;

        $r5 = virtualinvoke $r9.getMessage();

        $z0 = virtualinvoke $r5.contains("object not found: ACCESS_LOG");

        if $z0 == 0 goto label5;

        return 0;

     label5:
        $r6 = java.lang.System.err;

        $r10 = (java.sql.SQLException) $r4;

        $r7 = virtualinvoke $r10.getMessage();

        virtualinvoke $r6.println($r7);

        return 0;

        catch java.sql.SQLException from label1 to label3 with label4;
    }
}
