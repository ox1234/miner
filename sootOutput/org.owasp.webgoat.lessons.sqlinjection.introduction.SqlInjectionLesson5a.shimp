public class org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a extends org.owasp.webgoat.container.assignments.AssignmentEndpoint
{
    private static final java.lang.String EXPLANATION;
    private final org.owasp.webgoat.container.LessonDataSource dataSource;

    public void <init>(org.owasp.webgoat.container.LessonDataSource)
    {
        org.owasp.webgoat.container.LessonDataSource r1;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a r0;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.dataSource = r1;

        return;
    }

    public org.owasp.webgoat.container.assignments.AttackResult completed(java.lang.String, java.lang.String, java.lang.String)
    {
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a r0;
        org.owasp.webgoat.container.assignments.AttackResult $r5;
        java.lang.String r1, r2, r3, $r4;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $r4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("\u0001 \u0001 \u0001");

        $r5 = virtualinvoke r0.injectableQuery($r4);

        return $r5;
    }

    protected org.owasp.webgoat.container.assignments.AttackResult injectableQuery(java.lang.String)
    {
        java.sql.Connection $r2;
        java.sql.ResultSet $r6;
        boolean $z0;
        java.lang.Exception $r28;
        org.owasp.webgoat.container.assignments.AttackResult $r11, $r19, $r27, $r35, $r43;
        java.lang.StringBuilder $r47;
        java.sql.ResultSetMetaData $r12;
        java.lang.Throwable $r36, $r37, $r38, $r44, $r45;
        org.owasp.webgoat.container.LessonDataSource $r1;
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r7, $r8, $r10, $r15, $r18, $r20, $r21, $r23, $r26, $r29, $r34, $r39, $r42;
        java.lang.Object[] $r24;
        java.sql.SQLException $r48;
        org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a r0;
        int $i0;
        java.lang.String r3, $r4, $r9, $r14, $r16, $r17, $r22, $r25, $r31, $r32, $r33, $r40, $r41, r46, r46_1, r46_2, r46_3;
        java.sql.Statement $r5;
        java.lang.Class $r30;

        r0 := @this;

        r3 := @parameter0;

(0)     r46 = "";

     label01:
        $r1 = r0.dataSource;

(1)     $r2 = virtualinvoke $r1.getConnection();

     label02:
        $r4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(r3) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("SELECT * FROM user_data WHERE first_name = \'John\' and last_name = \'\u0001\'");

(2)     r46_1 = $r4;

     label03:
        $r5 = interfaceinvoke $r2.createStatement(1004, 1008);

     label04:
        $r6 = interfaceinvoke $r5.executeQuery($r4);

        if $r6 == null goto label12;

        $z0 = interfaceinvoke $r6.first();

        if $z0 == 0 goto label12;

        $r12 = interfaceinvoke $r6.getMetaData();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<init>();

        $r14 = staticinvoke org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a.writeTable($r6, $r12);

        virtualinvoke $r47.append($r14);

        interfaceinvoke $r6.last();

        $i0 = interfaceinvoke $r6.getRow();

        if $i0 < 6 goto label08;

        $r20 = virtualinvoke r0.success(r0);

        $r21 = virtualinvoke $r20.feedback("sql-injection.5a.success");

        $r22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($r4) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("Your query was: \u0001<br> Explanation: This injection works, because <span style=\"font-style: italic\">or \'1\' = \'1\'</span> always evaluates to true (The string ending literal for \'1 is closed by the query itself, so you should not inject it). So the injected query basically looks like this: <span style=\"font-style: italic\">SELECT * FROM user_data WHERE first_name = \'John\' and last_name = \'\' or TRUE</span>, which will always evaluate to true, no matter what came before it.");

        $r23 = virtualinvoke $r21.output($r22);

        $r24 = newarray (java.lang.Object)[1];

        $r25 = virtualinvoke $r47.toString();

        $r24[0] = $r25;

        $r26 = virtualinvoke $r23.feedbackArgs($r24);

        $r27 = virtualinvoke $r26.build();

     label05:
        if $r5 == null goto label06;

        interfaceinvoke $r5.close();

     label06:
(3)     if $r2 == null goto label07;

        interfaceinvoke $r2.close();

     label07:
        return $r27;

     label08:
        $r15 = virtualinvoke r0.failed(r0);

        $r16 = virtualinvoke $r47.toString();

        $r17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($r16, $r4) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("\u0001<br> Your query was: \u0001");

        $r18 = virtualinvoke $r15.output($r17);

        $r19 = virtualinvoke $r18.build();

     label09:
        if $r5 == null goto label10;

        interfaceinvoke $r5.close();

     label10:
(4)     if $r2 == null goto label11;

        interfaceinvoke $r2.close();

     label11:
        return $r19;

     label12:
        $r7 = virtualinvoke r0.failed(r0);

        $r8 = virtualinvoke $r7.feedback("sql-injection.5a.no.results");

        $r9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($r4) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("Your query was: \u0001");

        $r10 = virtualinvoke $r8.output($r9);

        $r11 = virtualinvoke $r10.build();

     label13:
        if $r5 == null goto label14;

        interfaceinvoke $r5.close();

     label14:
(5)     if $r2 == null goto label15;

        interfaceinvoke $r2.close();

     label15:
        return $r11;

     label16:
        $r45 := @caughtexception;

        if $r5 == null goto label20;

     label17:
        interfaceinvoke $r5.close();

     label18:
        goto label20;

     label19:
        $r44 := @caughtexception;

        virtualinvoke $r45.addSuppressed($r44);

     label20:
        throw $r45;

     label21:
        $r38 := @caughtexception;

        $r39 = virtualinvoke r0.failed(r0);

        $r48 = (java.sql.SQLException) $r38;

        $r40 = virtualinvoke $r48.getMessage();

        $r41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>($r40, $r4) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("\u0001<br> Your query was: \u0001");

        $r42 = virtualinvoke $r39.output($r41);

        $r43 = virtualinvoke $r42.build();

     label22:
(6)     if $r2 == null goto label23;

        interfaceinvoke $r2.close();

     label23:
        return $r43;

     label24:
        $r37 := @caughtexception;

        r46_2 = Phi(r46_1 #2, r46 #1);

(7)     if $r2 == null goto label28;

     label25:
        interfaceinvoke $r2.close();

     label26:
        goto label28;

     label27:
        $r36 := @caughtexception;

        virtualinvoke $r37.addSuppressed($r36);

     label28:
        throw $r37;

     label29:
        $r28 := @caughtexception;

        r46_3 = Phi(r46 #0, r46_1 #3, r46_1 #4, r46_1 #5, r46_1 #6, r46_2 #7);

        $r29 = virtualinvoke r0.failed(r0);

        $r30 = virtualinvoke r0.getClass();

        $r31 = virtualinvoke $r30.getName();

        $r32 = virtualinvoke $r28.getMessage();

        $r33 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>($r31, $r32, r46_3) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("\u0001 : \u0001<br> Your query was: \u0001");

        $r34 = virtualinvoke $r29.output($r33);

        $r35 = virtualinvoke $r34.build();

        return $r35;

        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.sql.SQLException from label03 to label06 with label21;
        catch java.sql.SQLException from label08 to label10 with label21;
        catch java.sql.SQLException from label12 to label14 with label21;
        catch java.sql.SQLException from label16 to label21 with label21;
        catch java.lang.Throwable from label02 to label06 with label24;
        catch java.lang.Throwable from label08 to label10 with label24;
        catch java.lang.Throwable from label12 to label14 with label24;
        catch java.lang.Throwable from label16 to label22 with label24;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Exception from label01 to label07 with label29;
        catch java.lang.Exception from label08 to label11 with label29;
        catch java.lang.Exception from label12 to label15 with label29;
        catch java.lang.Exception from label16 to label23 with label29;
        catch java.lang.Exception from label24 to label29 with label29;
    }

    public static java.lang.String writeTable(java.sql.ResultSet, java.sql.ResultSetMetaData) throws java.sql.SQLException
    {
        java.sql.ResultSet r1;
        int $i0, $i1, $i2, i3, i4, i3_1, i3_2, i4_1, i4_2, i4_3, i4_4, i3_3;
        java.lang.String $r3, $r4, $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.sql.ResultSetMetaData r0;

        r1 := @parameter0;

        r0 := @parameter1;

        $i0 = interfaceinvoke r0.getColumnCount();

        interfaceinvoke r1.beforeFirst();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<init>();

        virtualinvoke $r2.append("<p>");

        $z0 = interfaceinvoke r1.next();

        if $z0 == 0 goto label6;

(0)     i3 = 1;

     label1:
        i3_1 = Phi(i3 #0, i3_2 #1);

        $i1 = $i0 + 1;

        if i3_1 >= $i1 goto label2;

        $r5 = interfaceinvoke r0.getColumnName(i3_1);

        virtualinvoke $r2.append($r5);

        virtualinvoke $r2.append(", ");

        i3_2 = i3_1 + 1;

(1)     goto label1;

     label2:
        virtualinvoke $r2.append("<br />");

(2)     interfaceinvoke r1.beforeFirst();

     label3:
        i4 = Phi(i4 #2, i4_2 #6);

        $z1 = interfaceinvoke r1.next();

(3)     if $z1 == 0 goto label7;

(4)     i4_1 = 1;

     label4:
        i4_2 = Phi(i4_1 #4, i4_3 #5);

        $i2 = $i0 + 1;

        if i4_2 >= $i2 goto label5;

        $r4 = interfaceinvoke r1.getString(i4_2);

        virtualinvoke $r2.append($r4);

        virtualinvoke $r2.append(", ");

        i4_3 = i4_2 + 1;

(5)     goto label4;

     label5:
        virtualinvoke $r2.append("<br />");

(6)     goto label3;

     label6:
(7)     virtualinvoke $r2.append("Query Successful; however no data was returned from this query.");

     label7:
        i4_4 = Phi(i4 #3, i4 #7);

        i3_3 = Phi(i3_1 #3, i3 #7);

        virtualinvoke $r2.append("</p>");

        $r3 = virtualinvoke $r2.toString();

        return $r3;
    }
}
