public class org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge extends org.owasp.webgoat.container.assignments.AssignmentEndpoint
{
    private static final org.slf4j.Logger log;
    private final org.owasp.webgoat.container.LessonDataSource dataSource;

    public void <init>(org.owasp.webgoat.container.LessonDataSource)
    {
        org.owasp.webgoat.container.LessonDataSource r1;
        org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge r0;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.dataSource = r1;

        return;
    }

    public org.owasp.webgoat.container.assignments.AttackResult registerNewUser(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.sql.Connection $r6;
        java.sql.ResultSet $r9;
        boolean $z0, $z1;
        java.sql.PreparedStatement $r10;
        org.owasp.webgoat.container.assignments.AttackResult $r4, r26, r26_1, r26_2, r26_3, r26_4, r26_5, r26_6, r26_7, r26_8;
        java.lang.Throwable $r21, $r24, $r25;
        org.owasp.webgoat.container.LessonDataSource $r5;
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23;
        java.lang.Object[] $r13, $r17;
        java.lang.String r1, r2, r3, $r7;
        org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge r0;
        java.sql.Statement $r8;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $r4 = virtualinvoke r0.checkArguments(r1, r2, r3);

        r26 = $r4;

(0)     if $r4 != null goto label13;

     label01:
(1)     $r5 = r0.dataSource;

(2)     $r6 = virtualinvoke $r5.getConnection();

     label02:
        $r7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(r1) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("select userid from sql_challenge_users where userid = \'\u0001\'");

        $r8 = interfaceinvoke $r6.createStatement();

        $r9 = interfaceinvoke $r8.executeQuery($r7);

        $z0 = interfaceinvoke $r9.next();

        if $z0 == 0 goto label04;

        $z1 = virtualinvoke r1.contains("tom\'");

        if $z1 == 0 goto label03;

        $r19 = virtualinvoke r0.success(r0);

        $r20 = virtualinvoke $r19.feedback("user.exists");

(3)     r26_1 = virtualinvoke $r20.build();

(4)     goto label05;

     label03:
        $r15 = virtualinvoke r0.failed(r0);

        $r16 = virtualinvoke $r15.feedback("user.exists");

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r1;

        $r18 = virtualinvoke $r16.feedbackArgs($r17);

(5)     r26_2 = virtualinvoke $r18.build();

(6)     goto label05;

     label04:
        $r10 = interfaceinvoke $r6.prepareStatement("INSERT INTO sql_challenge_users VALUES (?, ?, ?)");

        interfaceinvoke $r10.setString(1, r1);

        interfaceinvoke $r10.setString(2, r2);

        interfaceinvoke $r10.setString(3, r3);

        interfaceinvoke $r10.execute();

        $r11 = virtualinvoke r0.success(r0);

        $r12 = virtualinvoke $r11.feedback("user.created");

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        $r14 = virtualinvoke $r12.feedbackArgs($r13);

(7)     r26_3 = virtualinvoke $r14.build();

     label05:
        r26_4 = Phi(r26_1 #4, r26_2 #6, r26_3 #7);

(8)     if $r6 == null goto label11;

        interfaceinvoke $r6.close();

        goto label11;

     label06:
        $r25 := @caughtexception;

        r26_5 = Phi(r26 #2, r26_1 #3, r26_2 #5, r26_3 #7);

        if $r6 == null goto label10;

     label07:
        interfaceinvoke $r6.close();

     label08:
        goto label10;

     label09:
(9)     $r24 := @caughtexception;

        virtualinvoke $r25.addSuppressed($r24);

     label10:
(10)    throw $r25;

     label11:
(11)    goto label13;

     label12:
        $r21 := @caughtexception;

        r26_6 = Phi(r26 #1, r26_4 #8, r26_5 #9, r26_5 #10);

        $r22 = virtualinvoke r0.failed(r0);

        $r23 = virtualinvoke $r22.output("Something went wrong");

(12)    r26_7 = virtualinvoke $r23.build();

     label13:
        r26_8 = Phi(r26 #0, r26_4 #11, r26_7 #12);

        return r26_8;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.sql.SQLException from label01 to label11 with label12;
    }

    private org.owasp.webgoat.container.assignments.AttackResult checkArguments(java.lang.String, java.lang.String, java.lang.String)
    {
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r4, $r5, $r7, $r8;
        int $i0, $i1, $i2;
        java.lang.String r0, r2, r3;
        boolean $z0, $z1, $z2;
        org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge r1;
        org.owasp.webgoat.container.assignments.AttackResult $r6, $r9;

        r1 := @this;

        r0 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $z0 = staticinvoke org.springframework.util.StringUtils.isEmpty(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke org.springframework.util.StringUtils.isEmpty(r2);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke org.springframework.util.StringUtils.isEmpty(r3);

        if $z2 == 0 goto label2;

     label1:
        $r4 = virtualinvoke r1.failed(r1);

        $r5 = virtualinvoke $r4.feedback("input.invalid");

        $r6 = virtualinvoke $r5.build();

        return $r6;

     label2:
        $i0 = virtualinvoke r0.length();

        if $i0 > 250 goto label3;

        $i1 = virtualinvoke r2.length();

        if $i1 > 30 goto label3;

        $i2 = virtualinvoke r3.length();

        if $i2 <= 30 goto label4;

     label3:
        $r7 = virtualinvoke r1.failed(r1);

        $r8 = virtualinvoke $r7.feedback("input.invalid");

        $r9 = virtualinvoke $r8.build();

        return $r9;

     label4:
        return null;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke org.slf4j.LoggerFactory.getLogger(class "Lorg/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge;");

        org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge.log = $r0;

        return;
    }
}
