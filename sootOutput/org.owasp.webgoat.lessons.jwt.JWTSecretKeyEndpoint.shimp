public class org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint extends org.owasp.webgoat.container.assignments.AssignmentEndpoint
{
    public static final java.lang.String[] SECRETS;
    public static final java.lang.String JWT_SECRET;
    private static final java.lang.String WEBGOAT_USER;
    private static final java.util.List expectedClaims;

    public void <init>()
    {
        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public java.lang.String getSecretToken()
    {
        java.util.Date $r4, $r8;
        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint r19;
        java.lang.String[] $r13;
        java.util.Calendar $r3;
        io.jsonwebtoken.JwtBuilder $r0, $r1, $r2, $r5, $r9, $r10, $r11, $r12, $r14, $r17;
        io.jsonwebtoken.SignatureAlgorithm $r16;
        java.lang.String $r15, $r18;
        java.time.Instant $r6, $r7;

        r19 := @this;

        $r0 = staticinvoke io.jsonwebtoken.Jwts.builder();

        $r1 = interfaceinvoke $r0.setIssuer("WebGoat Token Builder");

        $r2 = interfaceinvoke $r1.setAudience("webgoat.org");

        $r3 = staticinvoke java.util.Calendar.getInstance();

        $r4 = virtualinvoke $r3.getTime();

        $r5 = interfaceinvoke $r2.setIssuedAt($r4);

        $r6 = staticinvoke java.time.Instant.now();

        $r7 = virtualinvoke $r6.plusSeconds(60L);

        $r8 = staticinvoke java.util.Date.from($r7);

        $r9 = interfaceinvoke $r5.setExpiration($r8);

        $r10 = interfaceinvoke $r9.setSubject("tom@webgoat.org");

        $r11 = interfaceinvoke $r10.claim("username", "Tom");

        $r12 = interfaceinvoke $r11.claim("Email", "tom@webgoat.org");

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "Manager";

        $r13[1] = "Project Administrator";

        $r14 = interfaceinvoke $r12.claim("Role", $r13);

        $r16 = io.jsonwebtoken.SignatureAlgorithm.HS256;

        $r15 = org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.JWT_SECRET;

        $r17 = interfaceinvoke $r14.signWith($r16, $r15);

        $r18 = interfaceinvoke $r17.compact();

        return $r18;
    }

    public org.owasp.webgoat.container.assignments.AttackResult login(java.lang.String)
    {
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r13, $r14, $r16, $r18, $r20, $r21, $r24, $r25, $r27;
        java.lang.Object[] $r15;
        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint r12;
        io.jsonwebtoken.JwtParser $r0, $r2;
        io.jsonwebtoken.Claims r6;
        io.jsonwebtoken.Jws $r4;
        java.lang.String $r1, r3, r10, $r11, $r26;
        boolean $z0, $z1;
        java.util.Set $r7;
        java.lang.Exception $r23;
        java.util.List $r8;
        org.owasp.webgoat.container.assignments.AttackResult $r17, $r19, $r22, $r28;
        java.lang.Object $r5, $r9;

        r12 := @this;

        r3 := @parameter0;

     label1:
        $r0 = staticinvoke io.jsonwebtoken.Jwts.parser();

        $r1 = org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.JWT_SECRET;

        $r2 = interfaceinvoke $r0.setSigningKey($r1);

        $r4 = interfaceinvoke $r2.parseClaimsJws(r3);

        $r5 = interfaceinvoke $r4.getBody();

        r6 = (io.jsonwebtoken.Claims) $r5;

        $r7 = interfaceinvoke r6.keySet();

        $r8 = org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.expectedClaims;

        $z0 = interfaceinvoke $r7.containsAll($r8);

        if $z0 != 0 goto label3;

        $r20 = virtualinvoke r12.failed(r12);

        $r21 = virtualinvoke $r20.feedback("jwt-secret-claims-missing");

        $r22 = virtualinvoke $r21.build();

     label2:
        return $r22;

     label3:
        $r9 = interfaceinvoke r6.get("username");

        r10 = (java.lang.String) $r9;

        $r11 = "WebGoat";

        $z1 = virtualinvoke $r11.equalsIgnoreCase(r10);

        if $z1 == 0 goto label5;

        $r18 = virtualinvoke r12.success(r12);

        $r19 = virtualinvoke $r18.build();

     label4:
        return $r19;

     label5:
        $r13 = virtualinvoke r12.failed(r12);

        $r14 = virtualinvoke $r13.feedback("jwt-secret-incorrect-user");

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r10;

        $r16 = virtualinvoke $r14.feedbackArgs($r15);

        $r17 = virtualinvoke $r16.build();

     label6:
        return $r17;

     label7:
        $r23 := @caughtexception;

        $r24 = virtualinvoke r12.failed(r12);

        $r25 = virtualinvoke $r24.feedback("jwt-invalid-token");

        $r26 = virtualinvoke $r23.getMessage();

        $r27 = virtualinvoke $r25.output($r26);

        $r28 = virtualinvoke $r27.build();

        return $r28;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        io.jsonwebtoken.impl.TextCodec $r2;
        java.lang.String[] $r0, $r3, $r4;
        java.util.Random $r1;
        java.util.List $r7;
        int $i0, $i1;
        java.lang.String $r5, $r6;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "victory";

        $r0[1] = "business";

        $r0[2] = "available";

        $r0[3] = "shipping";

        $r0[4] = "washington";

        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.SECRETS = $r0;

        $r2 = io.jsonwebtoken.impl.TextCodec.BASE64;

        $r3 = org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.SECRETS;

        $r1 = new java.util.Random;

        specialinvoke $r1.<init>();

        $r4 = org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.SECRETS;

        $i0 = lengthof $r4;

        $i1 = virtualinvoke $r1.nextInt($i0);

        $r5 = $r3[$i1];

        $r6 = interfaceinvoke $r2.encode($r5);

        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.JWT_SECRET = $r6;

        $r7 = staticinvoke java.util.List.of("iss", "iat", "exp", "aud", "sub", "username", "Email", "Role");

        org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.expectedClaims = $r7;

        return;
    }
}
