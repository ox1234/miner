public class org.owasp.webgoat.container.users.UserService extends java.lang.Object implements org.springframework.security.core.userdetails.UserDetailsService
{
    private final org.owasp.webgoat.container.users.UserRepository userRepository;
    private final org.owasp.webgoat.container.users.UserTrackerRepository userTrackerRepository;
    private final org.springframework.jdbc.core.JdbcTemplate jdbcTemplate;
    private final java.util.function.Function flywayLessons;
    private final java.util.List lessonInitializables;

    public org.owasp.webgoat.container.users.WebGoatUser loadUserByUsername(java.lang.String) throws org.springframework.security.core.userdetails.UsernameNotFoundException
    {
        java.util.function.Consumer $r5;
        org.owasp.webgoat.container.users.UserRepository $r2;
        java.util.List $r4;
        org.springframework.security.core.userdetails.UsernameNotFoundException $r6;
        org.owasp.webgoat.container.users.UserService r0;
        org.owasp.webgoat.container.users.WebGoatUser $r3;
        java.lang.String r1;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.userRepository;

        $r3 = interfaceinvoke $r2.findByUsername(r1);

        if $r3 != null goto label1;

        $r6 = new org.springframework.security.core.userdetails.UsernameNotFoundException;

        specialinvoke $r6.<init>("User not found");

        throw $r6;

     label1:
        virtualinvoke $r3.createUser();

        $r4 = r0.lessonInitializables;

        $r5 = staticinvoke org.owasp.webgoat.container.users.UserService$lambda_loadUserByUsername_0__15.bootstrap$($r3);

        interfaceinvoke $r4.forEach($r5);

        return $r3;
    }

    public void addUser(java.lang.String, java.lang.String)
    {
        org.owasp.webgoat.container.users.UserRepository $r2, $r5;
        org.owasp.webgoat.container.users.UserService r0;
        org.owasp.webgoat.container.users.WebGoatUser $r3, r7;
        org.owasp.webgoat.container.users.UserTracker $r8;
        org.owasp.webgoat.container.users.UserTrackerRepository $r9;
        java.lang.Object $r6;
        java.lang.String r1, r4;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r4 := @parameter1;

        $r2 = r0.userRepository;

        $z0 = interfaceinvoke $r2.existsByUsername(r1);

        $r5 = r0.userRepository;

        $r3 = new org.owasp.webgoat.container.users.WebGoatUser;

        specialinvoke $r3.<init>(r1, r4);

        $r6 = interfaceinvoke $r5.save($r3);

        r7 = (org.owasp.webgoat.container.users.WebGoatUser) $r6;

        if $z0 != 0 goto label1;

        $r9 = r0.userTrackerRepository;

        $r8 = new org.owasp.webgoat.container.users.UserTracker;

        specialinvoke $r8.<init>(r1);

        interfaceinvoke $r9.save($r8);

        virtualinvoke r0.createLessonsForUser(r7);

     label1:
        return;
    }

    private void createLessonsForUser(org.owasp.webgoat.container.users.WebGoatUser)
    {
        org.owasp.webgoat.container.users.UserService r0;
        org.owasp.webgoat.container.users.WebGoatUser r1;
        java.util.function.Function $r5;
        org.springframework.jdbc.core.JdbcTemplate $r2;
        java.lang.Object $r7;
        org.flywaydb.core.Flyway $r8;
        java.lang.String $r3, $r4, $r6;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.jdbcTemplate;

        $r3 = virtualinvoke r1.getUsername();

        $r4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>($r3) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("CREATE SCHEMA \"\u0001\" authorization dba");

        virtualinvoke $r2.execute($r4);

        $r5 = r0.flywayLessons;

        $r6 = virtualinvoke r1.getUsername();

        $r7 = interfaceinvoke $r5.apply($r6);

        $r8 = (org.flywaydb.core.Flyway) $r7;

        virtualinvoke $r8.migrate();

        return;
    }

    public java.util.List getAllUsers()
    {
        org.owasp.webgoat.container.users.UserRepository $r1;
        java.util.List $r2;
        org.owasp.webgoat.container.users.UserService r0;

        r0 := @this;

        $r1 = r0.userRepository;

        $r2 = interfaceinvoke $r1.findAll();

        return $r2;
    }

    public void <init>(org.owasp.webgoat.container.users.UserRepository, org.owasp.webgoat.container.users.UserTrackerRepository, org.springframework.jdbc.core.JdbcTemplate, java.util.function.Function, java.util.List)
    {
        org.owasp.webgoat.container.users.UserRepository r1;
        java.util.List r5;
        org.owasp.webgoat.container.users.UserService r0;
        org.owasp.webgoat.container.users.UserTrackerRepository r2;
        java.util.function.Function r4;
        org.springframework.jdbc.core.JdbcTemplate r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        r5 := @parameter4;

        specialinvoke r0.<init>();

        r0.userRepository = r1;

        r0.userTrackerRepository = r2;

        r0.jdbcTemplate = r3;

        r0.flywayLessons = r4;

        r0.lessonInitializables = r5;

        return;
    }

    public volatile org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String) throws org.springframework.security.core.userdetails.UsernameNotFoundException
    {
        java.lang.String r1;
        org.owasp.webgoat.container.users.UserService r0;
        org.owasp.webgoat.container.users.WebGoatUser $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = virtualinvoke r0.loadUserByUsername(r1);

        return $r2;
    }

    public static void lambda$loadUserByUsername$0(org.owasp.webgoat.container.users.WebGoatUser, org.owasp.webgoat.container.lessons.Initializeable)
    {
        org.owasp.webgoat.container.lessons.Initializeable r0;
        org.owasp.webgoat.container.users.WebGoatUser r1;

        r1 := @parameter0;

        r0 := @parameter1;

        interfaceinvoke r0.initialize(r1);

        return;
    }
}
