public class org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b extends org.owasp.webgoat.container.assignments.AssignmentEndpoint
{

    public void <init>()
    {
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public org.owasp.webgoat.container.assignments.AttackResult completed(java.lang.String)
    {
        javax.tools.Diagnostic r13;
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z8_1, $z8_2, $z8_3;
        java.lang.Exception $r21;
        java.util.List $r27;
        org.owasp.webgoat.container.assignments.AttackResult $r6, $r11, $r17, $r20, $r25;
        org.owasp.webgoat.container.assignments.AttackResult$AttackResultBuilder $r4, $r5, $r8, $r9, $r10, $r15, $r16, $r18, $r19, $r22, $r24;
        int $i0, $i1;
        java.lang.String $r0, $r1, $r2, $r14, $r23, r26, r28, r28_1, r28_2, r28_3;
        java.util.Iterator $r7;
        java.lang.Object $r12;

        r3 := @this;

(0)     r26 := @parameter0;

     label01:
        $z0 = virtualinvoke r26.isEmpty();

        if $z0 == 0 goto label03;

        $r18 = virtualinvoke r3.failed(r3);

        $r19 = virtualinvoke $r18.feedback("sql-injection.10b.no-code");

        $r20 = virtualinvoke $r19.build();

     label02:
        return $r20;

     label03:
        $r0 = virtualinvoke r26.replaceAll("\\<.*?>", "");

        $r1 = virtualinvoke $r0.replace("\n", "");

        $r2 = virtualinvoke $r1.replace("\r", "");

        $z1 = virtualinvoke r3.check_text("(?=.*getConnection.*)", $r2);

        $z2 = virtualinvoke r3.check_text("(?=.*PreparedStatement.*)", $r2);

        $z3 = virtualinvoke r3.check_text("(?=.*setString.*)", $r2);

        $z4 = virtualinvoke r3.check_text("(?=.*\\=\\?.*|.*\\=\\s\\?.*)", $r2);

        $z5 = virtualinvoke r3.check_text("(?=.*execute.*)", $r2);

        $z6 = virtualinvoke r3.check_text("(?=.*executeUpdate.*)", $r2);

        if $z1 == 0 goto label05;

        if $z2 == 0 goto label05;

        if $z4 == 0 goto label05;

        if $z3 == 0 goto label05;

        if $z5 != 0 goto label04;

        if $z6 == 0 goto label05;

     label04:
        $z8 = 1;

(1)     goto label06;

     label05:
(2)     $z8_1 = 0;

     label06:
        $z8_2 = Phi($z8 #1, $z8_1 #2);

(3)     $r27 = virtualinvoke r3.compileFromString($r0);

        if $z8_2 == 0 goto label08;

        $i1 = interfaceinvoke $r27.size();

        if $i1 >= 1 goto label08;

        $r15 = virtualinvoke r3.success(r3);

        $r16 = virtualinvoke $r15.feedback("sql-injection.10b.success");

        $r17 = virtualinvoke $r16.build();

     label07:
        return $r17;

     label08:
        $i0 = interfaceinvoke $r27.size();

        if $i0 <= 0 goto label12;

        r28 = "";

(4)     $r7 = interfaceinvoke $r27.iterator();

     label09:
        r28_1 = Phi(r28 #4, r28_2 #6);

(5)     $z7 = interfaceinvoke $r7.hasNext();

        if $z7 == 0 goto label10;

        $r12 = interfaceinvoke $r7.next();

        r13 = (javax.tools.Diagnostic) $r12;

        $r14 = interfaceinvoke r13.getMessage(null);

        r28_2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(r28_1, $r14) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("\u0001\u0001<br>");

(6)     goto label09;

     label10:
        $r8 = virtualinvoke r3.failed(r3);

        $r9 = virtualinvoke $r8.feedback("sql-injection.10b.compiler-errors");

        $r10 = virtualinvoke $r9.output(r28_1);

        $r11 = virtualinvoke $r10.build();

     label11:
        return $r11;

     label12:
        $r4 = virtualinvoke r3.failed(r3);

        $r5 = virtualinvoke $r4.feedback("sql-injection.10b.failed");

        $r6 = virtualinvoke $r5.build();

     label13:
        return $r6;

     label14:
        $r21 := @caughtexception;

        r28_3 = Phi(r28 #0, r28_2 #6, r28_1 #5);

        $z8_3 = Phi($z8 #0, $z8_1 #2, $z8_2 #3);

        $r22 = virtualinvoke r3.failed(r3);

        $r23 = virtualinvoke $r21.getMessage();

        $r24 = virtualinvoke $r22.output($r23);

        $r25 = virtualinvoke $r24.build();

        return $r25;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label07 with label14;
        catch java.lang.Exception from label08 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    private java.util.List compileFromString(java.lang.String)
    {
        javax.tools.SimpleJavaFileObject $r5;
        java.lang.Object[] $r6;
        javax.tools.JavaCompiler $r0;
        javax.tools.StandardJavaFileManager $r2;
        javax.tools.JavaCompiler$CompilationTask $r8;
        java.util.List $r7, $r9;
        java.lang.String r4;
        javax.tools.DiagnosticCollector $r1;
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b r3;

        r3 := @this;

        r4 := @parameter0;

        $r0 = staticinvoke javax.tools.ToolProvider.getSystemJavaCompiler();

        $r1 = new javax.tools.DiagnosticCollector;

        specialinvoke $r1.<init>();

        $r2 = interfaceinvoke $r0.getStandardFileManager($r1, null, null);

        $r5 = virtualinvoke r3.getJavaFileContentsAsString(r4);

        $r6 = newarray (javax.tools.JavaFileObject)[1];

        $r6[0] = $r5;

        $r7 = staticinvoke java.util.Arrays.asList($r6);

        $r8 = interfaceinvoke $r0.getTask(null, $r2, $r1, null, null, $r7);

        interfaceinvoke $r8.call();

        $r9 = virtualinvoke $r1.getDiagnostics();

        return $r9;
    }

    private javax.tools.SimpleJavaFileObject getJavaFileContentsAsString(java.lang.String)
    {
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b$JavaObjectFromString $r3, r7, r7_1, r7_2;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r2, $r5;
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b r4;

        r4 := @this;

        r1 := @parameter0;

        $r0 = new java.lang.StringBuilder;

        $r2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(r1) java.lang.invoke.StringConcatFactory.makeConcatWithConstants("import java.sql.*; public class TestClass { static String DBUSER; static String DBPW; static String DBURL; public static void main(String[] args) {\u0001}}");

        specialinvoke $r0.<init>($r2);

        r7 = null;

     label1:
        $r3 = new org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b$JavaObjectFromString;

        $r5 = virtualinvoke $r0.toString();

        specialinvoke $r3.<init>(r4, "TestClass.java", $r5);

        r7_1 = $r3;

     label2:
(0)     goto label4;

     label3:
        $r6 := @caughtexception;

(1)     virtualinvoke $r6.printStackTrace();

     label4:
        r7_2 = Phi(r7_1 #0, r7 #1);

        return r7_2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean check_text(java.lang.String, java.lang.String)
    {
        java.util.regex.Matcher $r3;
        java.lang.String r0, r2;
        java.util.regex.Pattern $r1;
        org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b r4;
        boolean $z0;

        r4 := @this;

        r0 := @parameter0;

        r2 := @parameter1;

        $r1 = staticinvoke java.util.regex.Pattern.compile(r0, 2);

        $r3 = virtualinvoke $r1.matcher(r2);

        $z0 = virtualinvoke $r3.find();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
